import streamlit as st
import pandas as pd
import numpy as np

# H√†m ph√¢n t√≠ch quy·∫øt ƒë·ªãnh
def decision_making_analysis(data, probabilities=None, maximize=True, alpha=0.6):
    df = data.copy()
    criteria_cols = df.columns.tolist()

    # X·ª≠ l√Ω L·∫°c Quan v√† Bi Quan
    df['L·∫°c Quan'] = df[criteria_cols].max(axis=1) if maximize else df[criteria_cols].min(axis=1)
    df['Bi Quan'] = df[criteria_cols].min(axis=1) if maximize else df[criteria_cols].max(axis=1)
    
    df['Trung B√¨nh'] = df[criteria_cols].mean(axis=1)
    df['Realism'] = alpha * df['L·∫°c Quan'] + (1 - alpha) * df['Bi Quan']
    
    # T√≠nh EMV
    df['EMV'] = df[criteria_cols].dot(probabilities) if probabilities is not None else None

    # T√≠nh b·∫£ng Opportunity Loss
    opp_loss_table = df[criteria_cols].copy()
    for col in opp_loss_table.columns:
        best = opp_loss_table[col].max() if maximize else opp_loss_table[col].min()
        opp_loss_table[col] = abs(opp_loss_table[col] - best)
    df['Minimax Regret'] = opp_loss_table.max(axis=1)

    return df, opp_loss_table

# H√†m hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß + 1 c·ªôt k·∫øt qu·∫£ + k·∫øt lu·∫≠n
def show_decision_full(data, result, column_name, maximize=True, label="K·∫øt qu·∫£"):
    df_display = data.copy()
    df_display[column_name] = result[column_name]
    df_display.index.name = None  # ·∫®n t√™n index

    # CƒÉn ch·ªânh b·∫£ng d·ªØ li·ªáu
    styled_df = df_display.style \
        .format(precision=0) \
        .set_properties(**{'text-align': 'center'})

    # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
    st.markdown(f"""
    <div style="padding:8px 20px;border-left:5px solid #fb8c00;margin-bottom:10px;">
        <h3 style="color:#fb8c00;margin:0;"> {label}</h3>
    </div>
    """, unsafe_allow_html=True)

    # Hi·ªÉn th·ªã b·∫£ng ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng
    st.markdown(styled_df.to_html(), unsafe_allow_html=True)

    # X·ª≠ l√Ω logic cho ch·ªçn gi√° tr·ªã t·ªëi ∆∞u (l·ªõn nh·∫•t n·∫øu maximize = True, nh·ªè nh·∫•t n·∫øu maximize = False)
    if maximize:  # T·ªëi ƒëa h√≥a l·ª£i nhu·∫≠n
        best_value = result[column_name].max()  # Ch·ªçn gi√° tr·ªã l·ªõn nh·∫•t
    else:  # T·ªëi thi·ªÉu h√≥a chi ph√≠
        best_value = result[column_name].min()  # Ch·ªçn gi√° tr·ªã nh·ªè nh·∫•t

    # L·ª±a ch·ªçn ph∆∞∆°ng √°n c√≥ gi√° tr·ªã t·ªët nh·∫•t (l·ªõn nh·∫•t ho·∫∑c nh·ªè nh·∫•t)
    chosen_option = result[result[column_name] == best_value].index[0]

    # Hi·ªÉn th·ªã k·∫øt lu·∫≠n
    st.markdown(f"""
    <div style="background-color:#dff0d8;padding:15px;border-radius:10px;border-left:5px solid #3c763d;">
        <h4 style="color:#2e5c2e;margin-bottom:10px;">
            ‚úÖ <strong>Ch·ªçn ph∆∞∆°ng √°n <span style='color:#205081'>{chosen_option}</span> theo quy t·∫Øc <span style='color:#205081'>{label}</span></strong>
        </h4>
        <p style="color:#1f2d1f;margin:0;font-size:16px;">
            V√¨ c√≥ gi√° tr·ªã <strong>{column_name}</strong> {'l·ªõn nh·∫•t' if maximize else 'nh·ªè nh·∫•t'} l√†: 
            <code style="color:#000;background-color:#f7f7f7;padding:4px 8px;border-radius:6px;font-weight:bold;font-size:15px;">{best_value:,.0f}</code>
        </p>
    </div>
    """, unsafe_allow_html=True)

st.set_page_config(page_title="C√¥ng c·ª• ra quy·∫øt ƒë·ªãnh", layout="wide")

st.markdown(""" 
<div style="
    background-color:#ffe0b2;
    padding:20px;
    border-radius:12px;
    text-align:center;
    margin-bottom:30px;
    border-left:6px solid #ff9800;
">
    <h1 style="color:#333333; font-size:36px; margin:0;">
        DECISION ANALYSIS - Group 9
    </h1>
</div>
""", unsafe_allow_html=True)

col1, col2 = st.columns([1, 2])

with col1:
    st.markdown("<h3 style='color:#ff9800;'>1. M·ª•c ti√™u c·ªßa b·∫°n l√†:</h3>", unsafe_allow_html=True)
    maximize = st.radio(
        label="",
        options=['T·ªëi ƒëa l·ª£i nhu·∫≠n', 'T·ªëi thi·ªÉu chi ph√≠'],
        index=0,
        horizontal=False
    )

    # L∆∞u gi√° tr·ªã l·ª±a ch·ªçn v√†o session state
    st.session_state.maximize = True if maximize == 'T·ªëi ƒëa l·ª£i nhu·∫≠n' else False

    # üëá Th√™m h√¨nh minh h·ªça ·ªü ƒë√¢y
    st.image("reference.png", caption="L∆∞u √Ω: Ch·ªâ copy ph·∫ßn d·ªØ li·ªáu nh∆∞ tr√™n h√¨nh", width=350)

with col2:
    st.markdown("<h3 style='color:#ff9800;'>2. Nh·∫≠p b·∫£ng d·ªØ li·ªáu:</h3>", unsafe_allow_html=True)

    user_input = st.text_area(
        "D√°n d·ªØ li·ªáu v√†o ƒë√¢y:",
        value="Pro\t0.5\t0.3\t0.2\nA\t50000\t20000\t-10000\nB\t80000\t22000\t-20000\nC\t100000\t30000\t-40000\nD\t300000\t25000\t-100000",
        height=150
    )

data, probabilities = None, None

if user_input:
    try:
        from io import StringIO
        # Thay th·∫ø d·∫•u '‚Äì' th√†nh d·∫•u '-'
        user_input_cleaned = user_input.replace('‚Äì', '-')
        
        data_raw = pd.read_csv(StringIO(user_input_cleaned), sep="\t", header=0, dtype=str)
        data_raw = data_raw.replace({",": ""}, regex=True)

        # T√°ch d√≤ng x√°c su·∫•t
        probabilities_row = data_raw[data_raw.iloc[:, 0] == 'Pro']
        if probabilities_row.empty:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y d√≤ng 'Pro'!")
        else:
            probabilities = probabilities_row.iloc[0, 1:].astype(float).values
            data = data_raw[data_raw.iloc[:, 0] != 'Pro'].copy()
            data.set_index(data.columns[0], inplace=True)
            data = data.astype(float)
    except Exception as e:
        st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")

# Tabs giao di·ªán ƒë∆°n gi·∫£n h∆°n
if data is not None and probabilities is not None:
    st.markdown("<h3 style='color:#ff9800;'>3. L·ª±a ch·ªçn ph∆∞∆°ng ph√°p ra quy·∫øt ƒë·ªãnh:</h3>", unsafe_allow_html=True)
    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
        "üîù L·∫°c Quan", "üõ°Ô∏è Bi Quan", "‚öñÔ∏è Equally Likely",
        "üéØ Realism", "üò∞ Minimax Regret",
        "üîÆ EVPI", "üìò EOL"
    ])

with tab1:
    result, _ = decision_making_analysis(data, probabilities, st.session_state.maximize)  # Thay v√¨ maximize=True
    show_decision_full(data, result, 'L·∫°c Quan', maximize=st.session_state.maximize, label="L·∫°c Quan")

with tab2:
    result, _ = decision_making_analysis(data, probabilities, st.session_state.maximize)  # Thay v√¨ maximize=True
    show_decision_full(data, result, 'Bi Quan', maximize=st.session_state.maximize, label="Bi Quan")

with tab3:
    result, _ = decision_making_analysis(data, probabilities, st.session_state.maximize)  # Thay v√¨ maximize=st.session_state.maximize
    show_decision_full(data, result, 'Trung B√¨nh', maximize=st.session_state.maximize, label="Equally Likely")

    with tab4:
        alpha_Realism = st.number_input(
            "üéØ Nh·∫≠p h·ªá s·ªë alpha cho Realism (0 < Œ± < 1):",
            min_value=0.0,
            max_value=1.0,
            value=0.6,
            step=0.01,
            format="%.2f"
        )
        result, _ = decision_making_analysis(data, probabilities, st.session_state.maximize, alpha=alpha_Realism)
        show_decision_full(data, result, 'Realism', maximize=st.session_state.maximize, label=f"Realism (Œ± = {alpha_Realism})")

    with tab5:
        result, opp_loss = decision_making_analysis(data, probabilities, st.session_state.maximize)

        # ‚ùóÔ∏èX√ìA t√™n c·ªôt index (Unnamed: 0)
        opp_loss.index.name = None

        # üíÖ Hi·ªÉn th·ªã b·∫£ng Opportunity Loss ƒë·∫πp
        st.markdown("""<div style="padding:8px 20px;border-left:5px solid #e91e63;margin-bottom:10px;">
            <h3 style="color:#e91e63;margin:0;"> B·∫£ng Opportunity Loss</h3></div>""", unsafe_allow_html=True)
        
        styled_opp_loss = opp_loss.style.format(precision=0).set_properties(**{'text-align': 'center'})
        
        st.markdown(styled_opp_loss.to_html(), unsafe_allow_html=True)

        # ‚úÖ K·∫øt lu·∫≠n
        show_decision_full(data, result, 'Minimax Regret', maximize=False, label="Minimax Regret")

    with tab6:
        result, _ = decision_making_analysis(data, probabilities, st.session_state.maximize)
        show_decision_full(data, result, 'EMV', maximize=True, label="EMV")

        result, _ = decision_making_analysis(data, probabilities, st.session_state.maximize)

        # T√≠nh EVwPI, EVwoPI v√† EVPI
        best_per_state = data.max(axis=0) if st.session_state.maximize else data.min(axis=0)
        EVwPI = np.dot(best_per_state.values, probabilities)
        EVwoPI = result['EMV'].max() if st.session_state.maximize else result['EMV'].min()
        EVPI = EVwPI - EVwoPI

        # K·∫øt lu·∫≠n
        st.markdown(f"""
        <div style="background-color:#e8f4fd;padding:15px;border-radius:10px;border-left:5px solid #1c3d5a; margin-top: 20px;">
            <h4 style="color:#1c3d5a;margin-bottom:10px;">
                üîÆ <strong>Gi√° tr·ªã Th√¥ng tin Ho√†n h·∫£o (EVPI)</strong>
            </h4>
            <ul style="margin-left:20px;color:#1c3d5a;font-size:15px;">
                <li><strong>üß† EVwPI</strong>: 
                    <code style="color:#000;background-color:#f7f7f7;padding:4px 8px;border-radius:6px;font-weight:bold;">{EVwPI:,.2f}</code>
                </li>
                <li><strong>üßÆ EMV t·ªët nh·∫•t</strong>: 
                    <code style="color:#000;background-color:#f7f7f7;padding:4px 8px;border-radius:6px;font-weight:bold;">{EVwoPI:,.2f}</code>
                </li>
                <li><strong>üí° EVPI</strong>: 
                    <code style="color:#000;background-color:#e0ffe0;padding:4px 8px;border-radius:6px;font-weight:bold;">{EVPI:,.2f}</code>
                </li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
with tab7:
        result, opp_loss = decision_making_analysis(data, probabilities, maximize)
        EOL_table = opp_loss.copy()
        for col in EOL_table.columns:
            EOL_table[col] = EOL_table[col] * probabilities[list(EOL_table.columns).index(col)]
        result['EOL'] = EOL_table.sum(axis=1)

        # X·ª≠ l√Ω format b·∫£ng EOL ƒë·∫πp
        EOL_table.index.name = None
        styled_eol = EOL_table.style \
            .format(precision=0) \
            .set_properties(**{'text-align': 'center'}) \
            .set_table_styles([
                {'selector': 'th', 'props': [('color', '#0277bd'), ('font-weight', 'bold'), ('text-align', 'center')]}
            ])

        # Ti√™u ƒë·ªÅ v√† b·∫£ng
        st.markdown("""
        <div style="padding:8px 20px;border-left:5px solid #29b6f6;margin-bottom:10px;">
            <h3 style="color:#29b6f6;margin:0;"> B·∫£ng Expected Opportunity Loss (EOL)</h3>
        </div>
        """, unsafe_allow_html=True)
        st.markdown(styled_eol.to_html(), unsafe_allow_html=True)

        show_decision_full(data, result, 'EOL', maximize=False, label="Expected Opportunity Loss")
